{"ast":null,"code":"var _jsxFileName = \"C:\\\\Laravel-React-TaskManager\\\\frontend\\\\src\\\\components\\\\TaskList.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect, useCallback } from 'react';\nimport { List, ListItem, ListItemText, Checkbox, Button, Box, Typography, CircularProgress } from '@mui/material';\nimport { getTasks } from '../api';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst TaskList = ({\n  projectId\n}) => {\n  _s();\n  const [tasks, setTasks] = useState([]);\n  const [loading, setLoading] = useState(true);\n  const fetchTasks = useCallback(async () => {\n    try {\n      const response = await getTasks(projectId);\n      setTasks(response.data);\n    } catch (error) {\n      console.error('Error fetching tasks:', error);\n    } finally {\n      setLoading(false);\n    }\n  }, [projectId]);\n  useEffect(() => {\n    fetchTasks();\n  }, [fetchTasks]);\n  if (loading) {\n    return /*#__PURE__*/_jsxDEV(CircularProgress, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 25,\n      columnNumber: 12\n    }, this);\n  }\n  return /*#__PURE__*/_jsxDEV(Box, {\n    children: [/*#__PURE__*/_jsxDEV(Typography, {\n      variant: \"h5\",\n      gutterBottom: true,\n      children: \"Tasks\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 30,\n      columnNumber: 7\n    }, this), tasks.length === 0 ? /*#__PURE__*/_jsxDEV(Typography, {\n      children: \"No tasks available for this project\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 34,\n      columnNumber: 9\n    }, this) : /*#__PURE__*/_jsxDEV(List, {\n      children: tasks.map(task => /*#__PURE__*/_jsxDEV(ListItem, {\n        divider: true,\n        children: [/*#__PURE__*/_jsxDEV(Checkbox, {\n          checked: task.completed,\n          onChange: () => handleToggleComplete(task)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 39,\n          columnNumber: 15\n        }, this), /*#__PURE__*/_jsxDEV(ListItemText, {\n          primary: task.title,\n          secondary: task.description,\n          sx: {\n            textDecoration: task.completed ? 'line-through' : 'none'\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 43,\n          columnNumber: 15\n        }, this), /*#__PURE__*/_jsxDEV(Button, {\n          variant: \"outlined\",\n          color: \"error\",\n          onClick: () => handleDelete(task.id),\n          children: \"Delete\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 48,\n          columnNumber: 15\n        }, this)]\n      }, task.id, true, {\n        fileName: _jsxFileName,\n        lineNumber: 38,\n        columnNumber: 13\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 36,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 29,\n    columnNumber: 5\n  }, this);\n};\n_s(TaskList, \"uTl45IrJcCc0WowKv6VbSGMS01Q=\");\n_c = TaskList;\nexport default TaskList;\nvar _c;\n$RefreshReg$(_c, \"TaskList\");","map":{"version":3,"names":["React","useState","useEffect","useCallback","List","ListItem","ListItemText","Checkbox","Button","Box","Typography","CircularProgress","getTasks","jsxDEV","_jsxDEV","TaskList","projectId","_s","tasks","setTasks","loading","setLoading","fetchTasks","response","data","error","console","fileName","_jsxFileName","lineNumber","columnNumber","children","variant","gutterBottom","length","map","task","divider","checked","completed","onChange","handleToggleComplete","primary","title","secondary","description","sx","textDecoration","color","onClick","handleDelete","id","_c","$RefreshReg$"],"sources":["C:/Laravel-React-TaskManager/frontend/src/components/TaskList.js"],"sourcesContent":["import React, { useState, useEffect, useCallback } from 'react';\r\nimport { List, ListItem, ListItemText, Checkbox, Button, Box, Typography, CircularProgress } from '@mui/material';\r\nimport { getTasks } from '../api';\r\n\r\nconst TaskList = ({ projectId }) => {\r\n  const [tasks, setTasks] = useState([]);\r\n  const [loading, setLoading] = useState(true);\r\n\r\n  const fetchTasks = useCallback(async () => {\r\n    try {\r\n      const response = await getTasks(projectId);\r\n      setTasks(response.data);\r\n    } catch (error) {\r\n      console.error('Error fetching tasks:', error);\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  }, [projectId]);\r\n\r\n  useEffect(() => {\r\n    fetchTasks();\r\n  }, [fetchTasks]);\r\n\r\n  if (loading) {\r\n    return <CircularProgress />;\r\n  }\r\n\r\n  return (\r\n    <Box>\r\n      <Typography variant=\"h5\" gutterBottom>\r\n        Tasks\r\n      </Typography>\r\n      {tasks.length === 0 ? (\r\n        <Typography>No tasks available for this project</Typography>\r\n      ) : (\r\n        <List>\r\n          {tasks.map((task) => (\r\n            <ListItem key={task.id} divider>\r\n              <Checkbox\r\n                checked={task.completed}\r\n                onChange={() => handleToggleComplete(task)}\r\n              />\r\n              <ListItemText\r\n                primary={task.title}\r\n                secondary={task.description}\r\n                sx={{ textDecoration: task.completed ? 'line-through' : 'none' }}\r\n              />\r\n              <Button\r\n                variant=\"outlined\"\r\n                color=\"error\"\r\n                onClick={() => handleDelete(task.id)}\r\n              >\r\n                Delete\r\n              </Button>\r\n            </ListItem>\r\n          ))}\r\n        </List>\r\n      )}\r\n    </Box>\r\n  );\r\n};\r\n\r\nexport default TaskList;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}